{"ast":null,"code":"var _jsxFileName = \"/home/otpl/sites/bryntum-demo/src/containers/Content.js\",\n    _s = $RefreshSig$();\n\n/**\n * Content component\n */\n// libraries\nimport React, { useEffect, useRef } from \"react\"; // we import scheduler.umd for IE11 compatibility only. If you don't use IE import:\n// import { Toast } from 'bryntum-scheduler';\n\nimport { Toast } from \"bryntum-scheduler/scheduler.umd\";\nimport { BryntumScheduler } from \"bryntum-react-shared\"; // our stuff\n\nimport \"bryntum-scheduler/scheduler.stockholm.css\";\nimport TaskStore from \"../lib/TaskStore.js\";\nimport UnplannedGridComponent from \"../components/UnplannedGrid.js\";\nimport Drag from \"../lib/Drag.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Content = props => {\n  _s();\n\n  // we need there refs for setting up dragging\n  const scheduler = useRef(),\n        grid = useRef(),\n        // event store is needed by both scheduler and grid\n  // so we create it before to be accessible by both\n  eventStore = new TaskStore(); // equivalent of componentDidMount\n\n  useEffect(() => {\n    eventStore.on({\n      update: onEventStoreUpdate,\n      add: onEventStoreAdd\n    });\n    new Drag({\n      grid: grid.current.unplannedGrid,\n      schedule: scheduler.current.schedulerInstance,\n      constrain: false,\n      outerElement: grid.current.unplannedGrid.element\n    });\n    Toast.show({\n      timeout: 3500,\n      html: \"Please note that this example uses the Bryntum Grid, which is licensed separately.\"\n    }); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  /**\n   * @param {Event} record Event record\n   * @param {TaskStore} eventStore Event store firing the event\n   *\n   * Reschedules the overlapping events if the button is pressed\n   */\n\n  const onEventStoreUpdate = ({\n    record,\n    source: eventStore\n  }) => {\n    if (props.autoReschedule.current) {\n      eventStore.rescheduleOverlappingTasks(record);\n    }\n  };\n  /**\n   * @param {Event[]} records Array of Event records\n   * @param {TaskStore} eventStore Event store firing the event\n   *\n   * Reschedules the overlapping events if the button is pressed\n   */\n\n\n  const onEventStoreAdd = ({\n    records,\n    source: eventStore\n  }) => {\n    if (props.autoReschedule.current) {\n      records.forEach(eventRecord => eventStore.rescheduleOverlappingTasks(eventRecord));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"main\",\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-md-9\",\n      children: /*#__PURE__*/_jsxDEV(BryntumScheduler, {\n        ref: scheduler,\n        id: \"schedulerComponent\",\n        stripeFeature: true,\n        timeRangesFeature: true,\n        eventMenuFeature: {\n          items: {\n            // custom item with inline handler\n            unassign: {\n              text: \"Unassign\",\n              // icon   : 'b-fa b-fa-user-times',\n              weight: 200,\n              onItem: ({\n                eventRecord,\n                resourceRecord\n              }) => eventRecord.unassign(resourceRecord)\n            }\n          }\n        },\n        rowHeight: 50,\n        barMargin: 4,\n        eventColor: \"indigo\" // columns={[\n        //   {\n        //     type: \"resourceInfo\",\n        //     text: \"Name\",\n        //     width: 200,\n        //     showEventCount: false,\n        //     showRole: true,\n        //   },\n        //   {\n        //     text: \"Nbr tasks\",\n        //     editor: false,\n        //     renderer: (data) => `${data.record.events.length || \"\"}`,\n        //     align: \"center\",\n        //     sortable: (a, b) => (a.events.length < b.events.length ? -1 : 1),\n        //     width: 100,\n        //   },\n        // ]}\n        // Custom view preset with header configuration\n        ,\n        viewPreset: {\n          base: \"hourAndDay\",\n          columnLinesFor: 0,\n          headers: [{\n            unit: \"d\",\n            align: \"center\",\n            dateFormat: \"ddd DD MMM\"\n          }, {\n            unit: \"h\",\n            align: \"center\",\n            dateFormat: \"HH\"\n          }]\n        },\n        startDate: new Date(2025, 11, 1, 8),\n        endDate: new Date(2025, 11, 1, 18),\n        crudManager: {\n          autoLoad: true,\n          eventStore: eventStore,\n          transport: {\n            load: {\n              url: \"data/data.json\"\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-md-3\",\n      children: /*#__PURE__*/_jsxDEV(UnplannedGridComponent, {\n        ref: grid,\n        eventStore: eventStore\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Content, \"COJYujaAoaTsUUAUEwSu+6UpxX4=\");\n\n_c = Content;\nexport default Content;\n\nvar _c;\n\n$RefreshReg$(_c, \"Content\");","map":{"version":3,"sources":["/home/otpl/sites/bryntum-demo/src/containers/Content.js"],"names":["React","useEffect","useRef","Toast","BryntumScheduler","TaskStore","UnplannedGridComponent","Drag","Content","props","scheduler","grid","eventStore","on","update","onEventStoreUpdate","add","onEventStoreAdd","current","unplannedGrid","schedule","schedulerInstance","constrain","outerElement","element","show","timeout","html","record","source","autoReschedule","rescheduleOverlappingTasks","records","forEach","eventRecord","items","unassign","text","weight","onItem","resourceRecord","base","columnLinesFor","headers","unit","align","dateFormat","Date","autoLoad","transport","load","url"],"mappings":"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","sourcesContent":["/**\n * Content component\n */\n// libraries\nimport React, { useEffect, useRef } from \"react\";\n// we import scheduler.umd for IE11 compatibility only. If you don't use IE import:\n// import { Toast } from 'bryntum-scheduler';\nimport { Toast } from \"bryntum-scheduler/scheduler.umd\";\nimport { BryntumScheduler } from \"bryntum-react-shared\";\n\n// our stuff\nimport \"bryntum-scheduler/scheduler.stockholm.css\";\nimport TaskStore from \"../lib/TaskStore.js\";\nimport UnplannedGridComponent from \"../components/UnplannedGrid.js\";\nimport Drag from \"../lib/Drag.js\";\n\nconst Content = (props) => {\n  // we need there refs for setting up dragging\n  const scheduler = useRef(),\n    grid = useRef(),\n    // event store is needed by both scheduler and grid\n    // so we create it before to be accessible by both\n    eventStore = new TaskStore();\n\n  // equivalent of componentDidMount\n  useEffect(() => {\n    eventStore.on({\n      update: onEventStoreUpdate,\n      add: onEventStoreAdd,\n    });\n\n    new Drag({\n      grid: grid.current.unplannedGrid,\n      schedule: scheduler.current.schedulerInstance,\n      constrain: false,\n      outerElement: grid.current.unplannedGrid.element,\n    });\n\n    Toast.show({\n      timeout: 3500,\n      html:\n        \"Please note that this example uses the Bryntum Grid, which is licensed separately.\",\n    });\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  /**\n   * @param {Event} record Event record\n   * @param {TaskStore} eventStore Event store firing the event\n   *\n   * Reschedules the overlapping events if the button is pressed\n   */\n  const onEventStoreUpdate = ({ record, source: eventStore }) => {\n    if (props.autoReschedule.current) {\n      eventStore.rescheduleOverlappingTasks(record);\n    }\n  };\n\n  /**\n   * @param {Event[]} records Array of Event records\n   * @param {TaskStore} eventStore Event store firing the event\n   *\n   * Reschedules the overlapping events if the button is pressed\n   */\n  const onEventStoreAdd = ({ records, source: eventStore }) => {\n    if (props.autoReschedule.current) {\n      records.forEach((eventRecord) =>\n        eventStore.rescheduleOverlappingTasks(eventRecord)\n      );\n    }\n  };\n\n  return (\n    <div id=\"main\" className=\"row\">\n      <div className=\"col-md-9\">\n        <BryntumScheduler\n          ref={scheduler}\n          id=\"schedulerComponent\"\n          stripeFeature={true}\n          timeRangesFeature={true}\n          eventMenuFeature={{\n            items: {\n              // custom item with inline handler\n              unassign: {\n                text: \"Unassign\",\n                // icon   : 'b-fa b-fa-user-times',\n                weight: 200,\n                onItem: ({ eventRecord, resourceRecord }) =>\n                  eventRecord.unassign(resourceRecord),\n              },\n            },\n          }}\n          rowHeight={50}\n          barMargin={4}\n          eventColor=\"indigo\"\n          // columns={[\n          //   {\n          //     type: \"resourceInfo\",\n          //     text: \"Name\",\n          //     width: 200,\n          //     showEventCount: false,\n          //     showRole: true,\n          //   },\n          //   {\n          //     text: \"Nbr tasks\",\n          //     editor: false,\n          //     renderer: (data) => `${data.record.events.length || \"\"}`,\n          //     align: \"center\",\n          //     sortable: (a, b) => (a.events.length < b.events.length ? -1 : 1),\n          //     width: 100,\n          //   },\n          // ]}\n          // Custom view preset with header configuration\n          viewPreset={{\n            base: \"hourAndDay\",\n            columnLinesFor: 0,\n            headers: [\n              {\n                unit: \"d\",\n                align: \"center\",\n                dateFormat: \"ddd DD MMM\",\n              },\n              {\n                unit: \"h\",\n                align: \"center\",\n                dateFormat: \"HH\",\n              },\n            ],\n          }}\n          startDate={new Date(2025, 11, 1, 8)}\n          endDate={new Date(2025, 11, 1, 18)}\n          crudManager={{\n            autoLoad: true,\n            eventStore: eventStore,\n            transport: {\n              load: {\n                url: \"data/data.json\",\n              },\n            },\n          }}\n        />\n      </div>\n      <div className=\"col-md-3\">\n        <UnplannedGridComponent ref={grid} eventStore={eventStore} />\n      </div>\n    </div>\n  );\n};\n\nexport default Content;\n"]},"metadata":{},"sourceType":"module"}