{"ast":null,"code":"var _jsxFileName = \"/home/otpl/sites/bryntum-demo/src/containers/Content.js\",\n    _s = $RefreshSig$();\n\n/**\n * Content component\n */\n// libraries\nimport React, { useEffect, useRef } from 'react'; // we import scheduler.umd for IE11 compatibility only. If you don't use IE import:\n// import { Toast } from 'bryntum-scheduler';\n\nimport { Toast } from 'bryntum-scheduler/scheduler.umd';\nimport { BryntumScheduler } from 'bryntum-react-shared'; // our stuff\n\nimport 'bryntum-scheduler/scheduler.stockholm.css';\nimport TaskStore from '../lib/TaskStore.js';\nimport UnplannedGridComponent from '../components/UnplannedGrid.js';\nimport Drag from '../lib/Drag.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Content = props => {\n  _s();\n\n  // we need there refs for setting up dragging\n  const scheduler = useRef(),\n        grid = useRef(),\n        // event store is needed by both scheduler and grid\n  // so we create it before to be accessible by both\n  eventStore = new TaskStore(); // equivalent of componentDidMount\n\n  useEffect(() => {\n    eventStore.on({\n      update: onEventStoreUpdate,\n      add: onEventStoreAdd\n    });\n    new Drag({\n      grid: grid.current.unplannedGrid,\n      schedule: scheduler.current.schedulerInstance,\n      constrain: false,\n      outerElement: grid.current.unplannedGrid.element\n    });\n    Toast.show({\n      timeout: 3500,\n      html: 'Please note that this example uses the Bryntum Grid, which is licensed separately.'\n    }); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  /**\n   * @param {Event} record Event record\n   * @param {TaskStore} eventStore Event store firing the event\n   *\n   * Reschedules the overlapping events if the button is pressed\n   */\n\n  const onEventStoreUpdate = ({\n    record,\n    source: eventStore\n  }) => {\n    if (props.autoReschedule.current) {\n      eventStore.rescheduleOverlappingTasks(record);\n    }\n  };\n  /**\n   * @param {Event[]} records Array of Event records\n   * @param {TaskStore} eventStore Event store firing the event\n   *\n   * Reschedules the overlapping events if the button is pressed\n   */\n\n\n  const onEventStoreAdd = ({\n    records,\n    source: eventStore\n  }) => {\n    if (props.autoReschedule.current) {\n      records.forEach(eventRecord => eventStore.rescheduleOverlappingTasks(eventRecord));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(BryntumScheduler, {\n      ref: scheduler,\n      id: \"schedulerComponent\",\n      stripeFeature: true,\n      timeRangesFeature: true,\n      eventMenuFeature: {\n        items: {\n          // custom item with inline handler\n          unassign: {\n            text: 'Unassign',\n            icon: 'b-fa b-fa-user-times',\n            weight: 200,\n            onItem: ({\n              eventRecord,\n              resourceRecord\n            }) => eventRecord.unassign(resourceRecord)\n          }\n        }\n      },\n      rowHeight: 50,\n      barMargin: 4,\n      eventColor: \"indigo\",\n      columns: [{\n        type: 'resourceInfo',\n        text: 'Name',\n        width: 200,\n        showEventCount: false,\n        showRole: true\n      }] // Custom view preset with header configuration\n      ,\n      viewPreset: {\n        base: 'hourAndDay',\n        columnLinesFor: 0,\n        headers: [{\n          unit: 'd',\n          align: 'center',\n          dateFormat: 'ddd DD MMM'\n        }, {\n          unit: 'h',\n          align: 'center',\n          dateFormat: 'HH'\n        }]\n      },\n      startDate: new Date(2025, 11, 1, 8),\n      endDate: new Date(2025, 11, 1, 18),\n      crudManager: {\n        autoLoad: true,\n        eventStore: eventStore,\n        transport: {\n          load: {\n            url: 'data/data.json'\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(UnplannedGridComponent, {\n      ref: grid,\n      eventStore: eventStore\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Content, \"COJYujaAoaTsUUAUEwSu+6UpxX4=\");\n\n_c = Content;\nexport default Content;\n\nvar _c;\n\n$RefreshReg$(_c, \"Content\");","map":{"version":3,"sources":["/home/otpl/sites/bryntum-demo/src/containers/Content.js"],"names":["React","useEffect","useRef","Toast","BryntumScheduler","TaskStore","UnplannedGridComponent","Drag","Content","props","scheduler","grid","eventStore","on","update","onEventStoreUpdate","add","onEventStoreAdd","current","unplannedGrid","schedule","schedulerInstance","constrain","outerElement","element","show","timeout","html","record","source","autoReschedule","rescheduleOverlappingTasks","records","forEach","eventRecord","items","unassign","text","icon","weight","onItem","resourceRecord","type","width","showEventCount","showRole","base","columnLinesFor","headers","unit","align","dateFormat","Date","autoLoad","transport","load","url"],"mappings":"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","sourcesContent":["/**\n * Content component\n */\n// libraries\nimport React, { useEffect, useRef } from 'react';\n// we import scheduler.umd for IE11 compatibility only. If you don't use IE import:\n// import { Toast } from 'bryntum-scheduler';\nimport { Toast } from 'bryntum-scheduler/scheduler.umd';\nimport { BryntumScheduler } from 'bryntum-react-shared';\n\n// our stuff\nimport 'bryntum-scheduler/scheduler.stockholm.css';\nimport TaskStore from '../lib/TaskStore.js';\nimport UnplannedGridComponent from '../components/UnplannedGrid.js';\nimport Drag from '../lib/Drag.js';\n\nconst Content = props => {\n\n    // we need there refs for setting up dragging\n    const\n        scheduler = useRef(),\n        grid = useRef(),\n        // event store is needed by both scheduler and grid\n        // so we create it before to be accessible by both\n        eventStore = new TaskStore();\n\n    // equivalent of componentDidMount\n    useEffect(() => {\n\n        eventStore.on({\n            update : onEventStoreUpdate,\n            add    : onEventStoreAdd\n        });\n\n        new Drag({\n            grid         : grid.current.unplannedGrid,\n            schedule     : scheduler.current.schedulerInstance,\n            constrain    : false,\n            outerElement : grid.current.unplannedGrid.element\n        });\n\n        Toast.show({\n            timeout : 3500,\n            html : 'Please note that this example uses the Bryntum Grid, which is licensed separately.'\n        });\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    /**\n     * @param {Event} record Event record\n     * @param {TaskStore} eventStore Event store firing the event\n     *\n     * Reschedules the overlapping events if the button is pressed\n     */\n    const onEventStoreUpdate = ({ record, source : eventStore }) => {\n        if (props.autoReschedule.current) {\n            eventStore.rescheduleOverlappingTasks(record);\n        }\n    };\n\n    /**\n     * @param {Event[]} records Array of Event records\n     * @param {TaskStore} eventStore Event store firing the event\n     *\n     * Reschedules the overlapping events if the button is pressed\n     */\n    const onEventStoreAdd = ({ records, source : eventStore }) => {\n        if (props.autoReschedule.current) {\n            records.forEach((eventRecord) => eventStore.rescheduleOverlappingTasks(eventRecord));\n        }\n    };\n\n    return (\n        <div id=\"main\">\n            <BryntumScheduler\n                ref = {scheduler}\n                id  = \"schedulerComponent\"\n\n                stripeFeature           = {true}\n                timeRangesFeature       = {true}\n                eventMenuFeature = {{\n                    items : {\n                        // custom item with inline handler\n                        unassign : {\n                            text   : 'Unassign',\n                            icon   : 'b-fa b-fa-user-times',\n                            weight : 200,\n                            onItem : ({ eventRecord, resourceRecord }) => eventRecord.unassign(resourceRecord)\n                        }\n                    }\n                }}\n                rowHeight  = {50}\n                barMargin  = {4}\n                eventColor = 'indigo'\n                \n\n                columns = {[\n                    {\n                        type           : 'resourceInfo',\n                        text           : 'Name',\n                        width          : 200,\n                        showEventCount : false,\n                        showRole       : true\n                    }\n                ]}\n\n                // Custom view preset with header configuration\n                viewPreset = {{\n                    base           : 'hourAndDay',\n                    columnLinesFor : 0,\n                    headers        : [\n                        {\n                            unit       : 'd',\n                            align      : 'center',\n                            dateFormat : 'ddd DD MMM'\n                        },\n                        {\n                            unit       : 'h',\n                            align      : 'center',\n                            dateFormat : 'HH'\n                        }\n                    ]\n                }}\n\n                startDate   = {new Date(2025, 11, 1, 8)}\n                endDate     = {new Date(2025, 11, 1, 18)}\n                crudManager = {{\n                    autoLoad   : true,\n                    eventStore : eventStore,\n                    transport  : {\n                        load : {\n                            url : 'data/data.json'\n                        }\n                    }\n                }}\n            />\n            <UnplannedGridComponent\n                ref        = { grid }\n                eventStore = { eventStore }\n            />\n        </div>\n    );\n};\n\nexport default Content;\n"]},"metadata":{},"sourceType":"module"}