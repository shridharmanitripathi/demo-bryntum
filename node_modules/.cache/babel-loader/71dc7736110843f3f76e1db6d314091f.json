{"ast":null,"code":"/**\n * Taken from the vanilla dragfromgrid example\n */\n// we import scheduler.umd for IE11 compatibility only. If you don't use IE import:\n// import { DragHelper, DomHelper, Rectangle, WidgetHelper } from 'bryntum-scheduler';\nimport { DragHelper, DomHelper, Rectangle, WidgetHelper } from './../../node_modules/bryntum-scheduler/scheduler.umd';\nexport default class Drag extends DragHelper {\n  static get defaultConfig() {\n    return {\n      // Don't drag the actual row element, clone it\n      cloneTarget: true,\n      mode: 'translateXY',\n      // Only allow drops on the schedule area\n      dropTargetSelector: '.b-timeline-subgrid',\n      // Only allow drag of row elements inside on the unplanned grid\n      targetSelector: '.b-grid-row'\n    };\n  }\n\n  construct(config) {\n    const me = this;\n    super.construct(config);\n    me.on({\n      dragstart: me.onTaskDragStart,\n      drag: me.onTaskDrag,\n      drop: me.onTaskDrop,\n      thisObj: me\n    });\n  }\n\n  onTaskDragStart({\n    event,\n    context\n  }) {\n    const me = this,\n          mouseX = context.clientX,\n          proxy = context.element,\n          task = me.grid.getRecordFromElement(context.grabbed),\n          newWidth = me.schedule.timeAxisViewModel.getDistanceForDuration(task.durationMS); // save a reference to the task so we can access it later\n\n    context.task = task; // Mutate dragged element (grid row) into an event bar\n\n    proxy.classList.remove('b-grid-row');\n    proxy.classList.add('b-sch-event');\n    proxy.classList.add('b-unassigned-class');\n    proxy.innerHTML = task.name; // If the new width is narrower than the grabbed element...\n\n    if (context.grabbed.offsetWidth > newWidth) {\n      const proxyRect = Rectangle.from(context.grabbed); // If the mouse is off (nearly or) the end, centre the element on the mouse\n\n      if (mouseX > proxyRect.x + newWidth - 20) {\n        context.newX = context.elementStartX = context.elementX = mouseX - newWidth / 2;\n        DomHelper.setTranslateX(proxy, context.newX);\n      }\n    }\n\n    proxy.style.width = `${newWidth}px`; // Prevent tooltips from showing while dragging\n\n    me.schedule.element.classList.add('b-dragging-event');\n  }\n\n  onTaskDrag({\n    event,\n    context\n  }) {\n    const me = this,\n          date = me.schedule.getDateFromCoordinate(DomHelper.getTranslateX(context.element), 'round', false),\n          resource = context.target && me.schedule.resolveResourceRecord(context.target); // Don't allow drops anywhere, only allow drops if the drop is on the timeaxis and on top of a Resource\n\n    context.valid = context.valid && Boolean(date && resource); // Save reference to resource so we can use it in onTaskDrop\n\n    context.resource = resource;\n  } // Drop callback after a mouse up, take action and transfer the unplanned task to the real EventStore (if it's valid)\n\n\n  onTaskDrop({\n    context,\n    event\n  }) {\n    const me = this,\n          task = context.task,\n          target = context.target; // If drop was done in a valid location, set the startDate and transfer the task to the Scheduler event store\n\n    if (context.valid && target) {\n      const date = me.schedule.getDateFromCoordinate(DomHelper.getTranslateX(context.element), 'round', false),\n            // Try resolving event record from target element, to determine if drop was on another event\n      targetEventRecord = me.schedule.resolveEventRecord(context.target);\n\n      if (date) {\n        // Remove from grid first so that the data change\n        // below does not fire events into the grid.\n        me.grid.store.remove(task);\n        task.setStartDate(date, true);\n        task.resource = context.resource;\n        me.schedule.eventStore.add(task);\n      } // Dropped on a scheduled event, display toast\n\n\n      if (targetEventRecord) {\n        WidgetHelper.toast(`Dropped on ${targetEventRecord.name}`);\n      }\n\n      me.context.finalize();\n    } else {\n      me.abort();\n    }\n\n    me.schedule.element.classList.remove('b-dragging-event');\n  }\n\n}\n;","map":{"version":3,"sources":["/home/otpl/sites/bryntum-demo/src/lib/Drag.js"],"names":["DragHelper","DomHelper","Rectangle","WidgetHelper","Drag","defaultConfig","cloneTarget","mode","dropTargetSelector","targetSelector","construct","config","me","on","dragstart","onTaskDragStart","drag","onTaskDrag","drop","onTaskDrop","thisObj","event","context","mouseX","clientX","proxy","element","task","grid","getRecordFromElement","grabbed","newWidth","schedule","timeAxisViewModel","getDistanceForDuration","durationMS","classList","remove","add","innerHTML","name","offsetWidth","proxyRect","from","x","newX","elementStartX","elementX","setTranslateX","style","width","date","getDateFromCoordinate","getTranslateX","resource","target","resolveResourceRecord","valid","Boolean","targetEventRecord","resolveEventRecord","store","setStartDate","eventStore","toast","finalize","abort"],"mappings":"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","sourcesContent":["/**\n * Taken from the vanilla dragfromgrid example\n */\n// we import scheduler.umd for IE11 compatibility only. If you don't use IE import:\n// import { DragHelper, DomHelper, Rectangle, WidgetHelper } from 'bryntum-scheduler';\nimport { DragHelper, DomHelper, Rectangle, WidgetHelper } from './../../node_modules/bryntum-scheduler/scheduler.umd';\n\nexport default class Drag extends DragHelper {\n    static get defaultConfig() {\n        return {\n            // Don't drag the actual row element, clone it\n            cloneTarget        : true,\n            mode               : 'translateXY',\n            // Only allow drops on the schedule area\n            dropTargetSelector : '.b-timeline-subgrid',\n\n            // Only allow drag of row elements inside on the unplanned grid\n            targetSelector : '.b-grid-row'\n        };\n    }\n\n    construct(config) {\n        const me = this;\n\n        super.construct(config);\n\n        me.on({\n            dragstart : me.onTaskDragStart,\n            drag      : me.onTaskDrag,\n            drop      : me.onTaskDrop,\n            thisObj   : me\n        });\n    }\n\n    onTaskDragStart({ event, context }) {\n        const\n            me = this,\n            mouseX = context.clientX,\n            proxy = context.element,\n            task = me.grid.getRecordFromElement(context.grabbed),\n            newWidth = me.schedule.timeAxisViewModel.getDistanceForDuration(task.durationMS);\n\n        // save a reference to the task so we can access it later\n        context.task = task;\n\n        // Mutate dragged element (grid row) into an event bar\n        proxy.classList.remove('b-grid-row');\n        proxy.classList.add('b-sch-event');\n        proxy.classList.add('b-unassigned-class');\n        proxy.innerHTML = task.name;\n\n        // If the new width is narrower than the grabbed element...\n        if (context.grabbed.offsetWidth > newWidth) {\n            const proxyRect = Rectangle.from(context.grabbed);\n\n            // If the mouse is off (nearly or) the end, centre the element on the mouse\n            if (mouseX > proxyRect.x + newWidth - 20) {\n                context.newX = context.elementStartX = context.elementX = mouseX - newWidth / 2;\n                DomHelper.setTranslateX(proxy, context.newX);\n            }\n        }\n\n        proxy.style.width = `${newWidth}px`;\n\n        // Prevent tooltips from showing while dragging\n        me.schedule.element.classList.add('b-dragging-event');\n    }\n\n    onTaskDrag({ event, context }) {\n        const\n            me = this,\n            date = me.schedule.getDateFromCoordinate(DomHelper.getTranslateX(context.element), 'round', false),\n            resource = context.target && me.schedule.resolveResourceRecord(context.target);\n\n        // Don't allow drops anywhere, only allow drops if the drop is on the timeaxis and on top of a Resource\n        context.valid = context.valid && Boolean(date && resource);\n\n        // Save reference to resource so we can use it in onTaskDrop\n        context.resource = resource;\n    }\n\n    // Drop callback after a mouse up, take action and transfer the unplanned task to the real EventStore (if it's valid)\n    onTaskDrop({ context, event }) {\n        const\n            me = this,\n            task = context.task,\n            target = context.target;\n\n        // If drop was done in a valid location, set the startDate and transfer the task to the Scheduler event store\n        if (context.valid && target) {\n            const\n                date = me.schedule.getDateFromCoordinate(DomHelper.getTranslateX(context.element), 'round', false),\n                // Try resolving event record from target element, to determine if drop was on another event\n                targetEventRecord = me.schedule.resolveEventRecord(context.target);\n\n            if (date) {\n                // Remove from grid first so that the data change\n                // below does not fire events into the grid.\n                me.grid.store.remove(task);\n\n                task.setStartDate(date, true);\n                task.resource = context.resource;\n                me.schedule.eventStore.add(task);\n            }\n\n            // Dropped on a scheduled event, display toast\n            if (targetEventRecord) {\n                WidgetHelper.toast(`Dropped on ${targetEventRecord.name}`);\n            }\n\n            me.context.finalize();\n        }\n        else {\n            me.abort();\n        }\n\n        me.schedule.element.classList.remove('b-dragging-event');\n    }\n};\n"]},"metadata":{},"sourceType":"module"}